THREADPOOL :
************
Creating a new Thread for every job may create performance and memory problems. To overcome this we use ThreadPool.
ThreadPool is a pool of already created threads ready to do our job. Java 1.5 version introduced ThreadPool Framework to implement ThreadPool.
ThreadPool Framework is also known as Executor Framework. We can create a ThreadPool as follows
 
 /**  ExecutorService s = Executors.newFixedThreadPool(3);  **/
 
 We can submit a runnable job to threads in pool by using submit method as 
 
 /**  s.submit(job);   **/
 
 We can shutdown executor service by using shutdown method
 
 /**  s.shutdown();   **/
 
 NOTE:
 While designing web/application servers, we can use ThreadPool concept. Each request will be processed by a single thread from the ThreadPool
 
 CALLABLE(I) and FUTURE:
 ***********************
 In Runnable(I), Thread will not return anything after completing the job. 
 If a Thread is required to return a result after execution, then we can use Callable(I)
 
 Callable(I) - Contains 'call' method.
 				/** public Object call() throws Exception **/
 				If we submit callable Object to Executor, then after completing the job, Thread returns an object of type FUTURE.
 				(i.e) FUTURE object can be used to retrieve the result from Callable job.
 
 RUNNABLE(I) vs CALLABLE(I)
 **************************
 1. If a Thread is not required to return anything after completing the job then use Runnable
 	If we need a return object after the Thread finishes execution, then we can use Callable
 2. Runnable(I) contains only one method. 'Run'
 	Callable(I) contains only one method. 'Call'
 3. Runnable job is not required to return anything. So return type is void
 	Callable job is required to return something. So return type is Object
 4. Within the run() method, if an exception arises, then we need to handle by using try-catch block
 	Within the call() method, if an exception arises, we can throw it using Exception
 5. Runnable(I) is in java.lang package. Also it was introduced in Java 1.0 version.
 	Callable(I) is in java.util.concurrent package. Also it was introduced in Java 1.5 version.
 				